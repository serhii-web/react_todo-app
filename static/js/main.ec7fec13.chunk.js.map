{"version":3,"sources":["components/NewTodo/NewTodo.jsx","components/TodoFilter/TodoFilter.jsx","components/TodoList/TodoList.jsx","App.js","index.js"],"names":["NewTodo","addTodo","useState","todo","setTodo","onSubmit","e","preventDefault","trim","length","type","className","placeholder","value","onChange","target","TodoFilter","to","exact","activeClassName","TodoList","todos","setTodos","selectedId","setSelectedId","newTitle","setNewTitle","inputElement","useRef","pathname","useLocation","filterTodos","useMemo","filter","completed","useEffect","current","focus","id","areCompleted","every","changeTodosStatus","map","toggleStatusAll","checked","htmlFor","key","classnames","editing","onDoubleClick","title","todoId","findetTodo","find","prev","toggleStatus","onClick","filteredTodos","deleteTodo","ref","onBlur","onKeyDown","changeTitle","handleKeyDown","App","todoInProgres","Date","clearAllCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec7fec13.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ addTodo }) => {\n  const [todo, setTodo] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (todo.trim().length) {\n      addTodo(todo);\n    }\n\n    setTodo('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todo}\n        onChange={e => setTodo(e.target.value)}\n      />\n    </form>\n  );\n};\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const TodoFilter = () => (\n  <ul className=\"filters\">\n    <li>\n      <NavLink\n        to=\"/\"\n        exact\n        activeClassName=\"selected\"\n      >\n        All\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to=\"/active\"\n        activeClassName=\"selected\"\n      >\n        Active\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to=\"/completed\"\n        activeClassName=\"selected\"\n      >\n        Completed\n      </NavLink>\n    </li>\n  </ul>\n);\n","import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  const [selectedId, setSelectedId] = useState(0);\n  const [newTitle, setNewTitle] = useState('');\n  const inputElement = useRef(null);\n  const { pathname } = useLocation();\n\n  const filterTodos = useMemo(() => (pathname !== '/'\n    ? todos.filter(todo => (\n      pathname === '/completed'\n        ? todo.completed\n        : !todo.completed))\n    : todos), [pathname, todos]);\n\n  useEffect(() => {\n    if (inputElement.current) {\n      inputElement.current.focus();\n    }\n  });\n\n  const toggleStatusAll = () => {\n    const areCompleted = todos.every(todo => todo.completed);\n    const changeTodosStatus = todos.map(todo => (\n      { ...todo, completed: areCompleted ? !todo.completed : true }\n    ));\n\n    setTodos(changeTodosStatus);\n  };\n\n  const toggleStatus = (todoId) => {\n    const findetTodo = todos.find(todo => todo.id === todoId);\n\n    findetTodo.completed = !findetTodo.completed;\n\n    setTodos(prev => [...prev]);\n  };\n\n  const deleteTodo = (todoId) => {\n    const filteredTodos = todos.filter(todo => todo.id !== todoId);\n\n    setTodos(filteredTodos);\n  };\n\n  const handleBlur = (id) => {\n    const todochangeTitle = todos.find(todo => todo.id === id);\n\n    todochangeTitle.title = newTitle.trim();\n\n    setTodos(prev => [...prev]);\n    setNewTitle('');\n    setSelectedId(0);\n  };\n\n  const handleKeyDown = (e, title, todoId) => {\n    const changeTitle = todos.find(todo => todo.id === todoId);\n\n    switch (e.key) {\n      case 'Enter':\n        changeTitle.title = newTitle.trim();\n\n        setTodos(prev => [...prev]);\n        setNewTitle(newTitle);\n        setSelectedId(0);\n\n        break;\n      case 'Escape':\n\n        setTodos(prev => [...prev]);\n        setNewTitle(title);\n        setSelectedId(0);\n\n        break;\n\n      default:\n\n        break;\n    }\n  };\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={() => toggleStatusAll()}\n        checked={todos.every(todo => todo.completed) && todos.length}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {filterTodos.map(todo => (\n          <li\n            key={todo.id}\n            className={\n                classnames({\n                  editing: selectedId === todo.id,\n                  completed: todo.completed,\n                })\n              }\n            onDoubleClick={(e) => {\n              setSelectedId(todo.id);\n              setNewTitle(todo.title);\n            }}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                checked={todo.completed}\n                onChange={() => toggleStatus(todo.id)}\n              />\n              <label>{todo.title}</label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => deleteTodo(todo.id)}\n              />\n            </div>\n            <input\n              type=\"text\"\n              className=\"edit\"\n              value={newTitle}\n              ref={selectedId === todo.id ? inputElement : null}\n              onChange={e => setNewTitle(e.target.value)}\n              onBlur={() => handleBlur(todo.id)}\n              onKeyDown={e => handleKeyDown(e, todo.title, todo.id)}\n            />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useState, useMemo } from 'react';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const todoInProgres = useMemo(() => (\n    todos.filter(todo => !todo.completed).length\n  ), [todos]);\n\n  const addTodo = (title) => {\n    setTodos([\n      ...todos,\n      { id: +new Date(), title, completed: false },\n    ]);\n  };\n\n  const clearAllCompleted = () => {\n    const filteredTodos = todos.filter(todo => !todo.completed);\n\n    setTodos(filteredTodos);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo addTodo={addTodo} />\n      </header>\n\n      <TodoList\n        todos={todos}\n        setTodos={setTodos}\n      />\n\n      {todos.length > 0 && (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {todoInProgres}\n          {' '}\n          items left\n        </span>\n\n        <TodoFilter />\n\n        {todos.length !== todoInProgres && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => clearAllCompleted()}\n        >\n          Clear completed\n        </button>\n        )}\n      </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}